1. 代码下载
   git hub工作有点不正常，经过多次下载才成功；
   
2. 获得已经编译好的应用
   $ cd ~/android/system/vendor/cm
   $ ./get-prebuilts
   
3. Prepare the device-specific code 
   $ . build/envsetup.sh
   $ breakfast maguro
   再次，从github下载代码
   From git://github.com/CyanogenMod/android_kernel_samsung_tuna
   linux内核代码
   From git://github.com/CyanogenMod/android_device_samsung_tuna
   设备相关代码
   
   相关参数
    ============================================
		PLATFORM_VERSION_CODENAME=REL
		PLATFORM_VERSION=4.2.1
		TARGET_PRODUCT=cm_maguro
		TARGET_BUILD_VARIANT=userdebug
		TARGET_BUILD_TYPE=release
		TARGET_BUILD_APPS=
		TARGET_ARCH=arm
		TARGET_ARCH_VARIANT=armv7-a-neon
		HOST_ARCH=x86
		HOST_OS=linux
		HOST_OS_EXTRA=Linux-2.6.35-32-generic-x86_64-with-Ubuntu-10.10-maverick
		HOST_BUILD_TYPE=release
		BUILD_ID=JOP40D
		OUT_DIR=/home/tt/android/system/out
		============================================

4. Extract proprietary blobs
   $cd ~/android/system/device/samsung/maguro
   
   $ ./extract-files.sh
   从手机之中获得硬件相关的一些资源文件.
   
5. Turn on caching to speed up build 
    export USE_CCACHE=1
    
6. Start the build 
	$ croot
	$ brunch maguro
	
7. msm8625
   ro.product.manufacturer=unknown
   ro.product.manufacturer=amt  //vendor name
   ro.product.device=msm8625  //codename
   ro.product.board=7x27
   ro.board.platform=msm7627a
   
8. 
  ./build/tools/device/mkvendor.sh sam 91 ~/tmp/cm/boot.img   
  Done!
  Use the following command to set up your build environment:
   lunch full_91-eng
  And use the follwowing command to build a recovery:
   . build/tools/device/makerecoveries.sh full_91-eng
   
9. help.mk
   这个文件相对简单，定义一些帮助信息。如：
   .PHONY: help
   .PHONY: out
   
10. config.mk
  # This is included by the top-level Makefile.
	# It sets up standard variables based on the
	# current configuration and platform, which
	# are not specific to what is being built.      
	
	定义一些标准宏:
	# Standard source directories
	SRC_DOCS:= $(TOPDIR)docs
	SRC_HEADERS := \
	$(TOPDIR)system/core/include \
	$(TOPDIR)hardware/libhardware/include \
	$(TOPDIR)hardware/libhardware_legacy/include \
	$(TOPDIR)hardware/ril/include \
	$(TOPDIR)libnativehelper/include \
	$(TOPDIR)frameworks/native/include \
	$(TOPDIR)frameworks/native/opengl/include \
	$(TOPDIR)frameworks/av/include \
	$(TOPDIR)frameworks/base/include \
	$(TOPDIR)frameworks/base/opengl/include \
	$(TOPDIR)external/skia/include
	
	SRC_HOST_HEADERS:=$(TOPDIR)tools/include
	SRC_LIBRARIES:= $(TOPDIR)libs
	SRC_SERVERS:= $(TOPDIR)servers
	SRC_TARGET_DIR := $(TOPDIR)build/target
	SRC_API_DIR := $(TOPDIR)frameworks/base/api
	
	# Some specific paths to tools
	SRC_DROIDDOC_DIR := $(TOPDIR)build/tools/droiddoc

	# Various mappings to avoid hard-coding paths all over the place
	include $(BUILD_SYSTEM)/pathmap.mk
	
	# ###############################################################
	# Build system internal files
	# ###############################################################

	BUILD_COMBOS:= $(BUILD_SYSTEM)/combo
	BUILD_COMBOS:= $(BUILD_SYSTEM)/combo

	CLEAR_VARS:= $(BUILD_SYSTEM)/clear_vars.mk
	BUILD_HOST_STATIC_LIBRARY:= $(BUILD_SYSTEM)/host_static_library.mk
	BUILD_HOST_SHARED_LIBRARY:= $(BUILD_SYSTEM)/host_shared_library.mk
	BUILD_STATIC_LIBRARY:= $(BUILD_SYSTEM)/static_library.mk
	BUILD_RAW_STATIC_LIBRARY := $(BUILD_SYSTEM)/raw_static_library.mk
	BUILD_SHARED_LIBRARY:= $(BUILD_SYSTEM)/shared_library.mk
	BUILD_EXECUTABLE:= $(BUILD_SYSTEM)/executable.mk
	BUILD_RAW_EXECUTABLE:= $(BUILD_SYSTEM)/raw_executable.mk
	BUILD_HOST_EXECUTABLE:= $(BUILD_SYSTEM)/host_executable.mk
	BUILD_PACKAGE:= $(BUILD_SYSTEM)/package.mk
	BUILD_PHONY_PACKAGE:= $(BUILD_SYSTEM)/phony_package.mk
	BUILD_HOST_PREBUILT:= $(BUILD_SYSTEM)/host_prebuilt.mk
	BUILD_PREBUILT:= $(BUILD_SYSTEM)/prebuilt.mk
	BUILD_MULTI_PREBUILT:= $(BUILD_SYSTEM)/multi_prebuilt.mk
	BUILD_JAVA_LIBRARY:= $(BUILD_SYSTEM)/java_library.mk
	BUILD_STATIC_JAVA_LIBRARY:= $(BUILD_SYSTEM)/static_java_library.mk
	BUILD_HOST_JAVA_LIBRARY:= $(BUILD_SYSTEM)/host_java_library.mk
	BUILD_DROIDDOC:= $(BUILD_SYSTEM)/droiddoc.mk
	BUILD_COPY_HEADERS := $(BUILD_SYSTEM)/copy_headers.mk
	BUILD_NATIVE_TEST := $(BUILD_SYSTEM)/native_test.mk
	BUILD_HOST_NATIVE_TEST := $(BUILD_SYSTEM)/host_native_test.mk

	-include cts/build/config.mk
	
11.pathmap.mk
	# A central place to define mappings to paths, to avoid hard-coding
	# them in Android.mk files.
	
	#
	# A mapping from shorthand names to include directories.
	#
	pathmap_INCL := \
    bluedroid:system/bluetooth/bluedroid/include \
    bluez:external/bluetooth/bluez \
    glib:external/bluetooth/glib \
    bootloader:bootable/bootloader/legacy/include \
    camera:system/media/camera/include \
    corecg:external/skia/include/core \
    dbus:external/dbus \
    frameworks-base:frameworks/base/include \
    frameworks-native:frameworks/native/include \
    graphics:external/skia/include/core \
    libc:bionic/libc/include \
    libdrm1:frameworks/base/media/libdrm/mobile1/include \
    libhardware:hardware/libhardware/include \
    libhardware_legacy:hardware/libhardware_legacy/include \
    libhost:build/libs/host/include \
    libm:bionic/libm/include \
    libnativehelper:libnativehelper/include \
    libpagemap:system/extras/libpagemap/include \
    libril:hardware/ril/include \
    libstdc++:bionic/libstdc++/include \
    libthread_db:bionic/libthread_db/include \
    mkbootimg:system/core/mkbootimg \
    opengl-tests-includes:frameworks/native/opengl/tests/include \
    recovery:bootable/recovery \
    system-core:system/core/include \
    audio-effects:system/media/audio_effects/include \
    audio-utils:system/media/audio_utils/include \
    wilhelm:frameworks/wilhelm/include \
    wilhelm-ut:frameworks/wilhelm/src/ut \
    speex:external/speex/include
    
  FRAMEWORKS_BASE_SUBDIRS := \
	$(addsuffix /java, \
	    core \
	    graphics \
	    
	FRAMEWORKS_BASE_JAVA_SRC_DIRS := \
	$(addprefix frameworks/base/,$(FRAMEWORKS_BASE_SUBDIRS))
	
	FRAMEWORKS_SUPPORT_SUBDIRS := \
	v4 \
	v13 \
	
	FRAMEWORKS_SUPPORT_JAVA_SRC_DIRS := \
	$(addprefix frameworks/support/,$(FRAMEWORKS_SUPPORT_SUBDIRS))
	
12 clear_vars.mk
	###########################################################
	## Clear out values of all variables used by rule templates.
	###########################################################
	
	LOCAL_MODULE:=
	LOCAL_MODULE_PATH:=
	LOCAL_MODULE_STEM:=
	
	# Trim MAKEFILE_LIST so that $(call my-dir) doesn't need to
	# iterate over thousands of entries every time.
	# Leave the current makefile to make sure we don't break anything
	# that expects to be able to find the name of the current makefile.
	MAKEFILE_LIST := $(lastword $(MAKEFILE_LIST))

13. host_static_library.mk
  ###########################################################
	## Standard rules for building a static library for the host.
	##
	## Additional inputs from base_rules.make:
	## None.
	##
	## LOCAL_MODULE_SUFFIX will be set for you.
	###########################################################
	
	ifeq ($(strip $(LOCAL_MODULE_CLASS)),)
	LOCAL_MODULE_CLASS := STATIC_LIBRARIES
	endif
	ifeq ($(strip $(LOCAL_MODULE_SUFFIX)),)
	LOCAL_MODULE_SUFFIX := .a
	endif
	ifneq ($(strip $(LOCAL_MODULE_STEM)$(LOCAL_BUILT_MODULE_STEM)),)
	$(error $(LOCAL_PATH): Can not set module stem for a library)
	endif
	LOCAL_UNINSTALLABLE_MODULE := true
	
	LOCAL_IS_HOST_MODULE := true
	
	include $(BUILD_SYSTEM)/binary.mk
	
	$(LOCAL_BUILT_MODULE): $(built_whole_libraries)
	$(LOCAL_BUILT_MODULE): $(all_objects)
		$(transform-host-o-to-static-lib)
				
14. binary.mk
	###########################################################
	## Standard rules for building binary object files from
	## asm/c/cpp/yacc/lex source files.
	##
	## The list of object files is exported in $(all_objects).
	###########################################################
 
 	######################################
	## Sanity check for LOCAL_NDK_VERSION
	######################################

  ##################################################
	# Compute the dependency of the shared libraries
	##################################################
	
	#######################################
	include $(BUILD_SYSTEM)/base_rules.mk
	#######################################
	
	LOCAL_ASFLAGS += -D__ASSEMBLY__
	my_target_project_includes := $(TARGET_PROJECT_INCLUDES)
	my_target_c_includes := $(TARGET_C_INCLUDES)
	my_target_global_cflags := $(my_target_global_cflags)
	my_target_global_cppflags := $(TARGET_GLOBAL_CPPFLAGS)
	
	ifeq ($(strip $(LOCAL_CXX)),)
  ifeq ($(strip $(LOCAL_CLANG)),true)
    LOCAL_CXX := $(CLANG_CXX)
  else
    LOCAL_CXX := $($(my_prefix)CXX)
  endif
	Endif
	
15. base_rules.mk
  # Users can define base-rules-hook in their buildspec.mk to perform
	# arbitrary operations as each module is included.	
	
	###########################################################
	## Common instructions for a generic module.
	###########################################################
	
	LOCAL_MODULE := $(strip $(LOCAL_MODULE))
	ifeq ($(LOCAL_MODULE),)
	  $(error $(LOCAL_PATH): LOCAL_MODULE is not defined)
	endif
	
	LOCAL_IS_HOST_MODULE := $(strip $(LOCAL_IS_HOST_MODULE))
	ifdef LOCAL_IS_HOST_MODULE
	  ifneq ($(LOCAL_IS_HOST_MODULE),true)
	    $(error $(LOCAL_PATH): LOCAL_IS_HOST_MODULE must be "true" or empty, not "$(LOCAL_IS_HOST_MODULE)")
	  endif
	  my_prefix:=HOST_
	  my_host:=host-
	else
	  my_prefix:=TARGET_
	  my_host:=
	endif
	
	###########################################################
	## Validate and define fallbacks for input LOCAL_* variables.
	###########################################################

	###########################################################
	## AIDL: Compile .aidl files to .java
	###########################################################
	
	aidl_sources := $(filter %.aidl,$(LOCAL_SRC_FILES))

	###########################################################
	## .proto files: Compile proto files to .java
	###########################################################
	proto_sources := $(filter %.proto,$(LOCAL_SRC_FILES))
	# Because names of the .java files compiled from .proto files are unknown until the
	# .proto files are compiled, we use a timestamp file as depedency.
	proto_java_sources_file_stamp :=
	ifneq ($(proto_sources),)

	###########################################################
	## make clean- targets
	###########################################################
	cleantarget := clean-$(LOCAL_MODULE)
	$(cleantarget) : PRIVATE_MODULE := $(LOCAL_MODULE)
	$(cleantarget) : PRIVATE_CLEAN_FILES := \
			$(PRIVATE_CLEAN_FILES) \
			$(LOCAL_BUILT_MODULE) \
			$(LOCAL_INSTALLED_MODULE) \
			$(intermediates)
	$(cleantarget)::
		@echo "Clean: $(PRIVATE_MODULE)"
		$(hide) rm -rf $(PRIVATE_CLEAN_FILES)
		
	###########################################################
	## Common definitions for module.
	###########################################################
	
	# Propagate local configuration options to this target.
	$(LOCAL_INTERMEDIATE_TARGETS) : PRIVATE_PATH:=$(LOCAL_PATH)
	$(LOCAL_INTERMEDIATE_TARGETS) : PRIVATE_POST_PROCESS_COMMAND:= $(LOCAL_POST_PROCESS_COMMAND)
	$(LOCAL_INTERMEDIATE_TARGETS) : PRIVATE_AAPT_FLAGS:= $(LOCAL_AAPT_FLAGS)
	$(LOCAL_INTERMEDIATE_TARGETS) : PRIVATE_JAVA_LIBRARIES:= $(LOCAL_JAVA_LIBRARIES)
	$(LOCAL_INTERMEDIATE_TARGETS) : PRIVATE_MANIFEST_PACKAGE_NAME:= $(LOCAL_MANIFEST_PACKAGE_NAME)
	$(LOCAL_INTERMEDIATE_TARGETS) : PRIVATE_MANIFEST_INSTRUMENTATION_FOR:= $(LOCAL_MANIFEST_INSTRUMENTATION_FOR)		
	
	##########################################################
	## NOTICE files
	###########################################################
	
	include $(BUILD_SYSTEM)/notice_files.mk

16. definitions.mk
	###########################################################
	## Commands for running gcc to compile a C++ file
	###########################################################
	
	define transform-cpp-to-o
	@mkdir -p $(dir $@)
	@echo "target $(PRIVATE_ARM_MODE) C++: $(PRIVATE_MODULE) <= $<"
	$(hide) $(PRIVATE_CXX) \
		$(addprefix -I , $(PRIVATE_C_INCLUDES)) \
		@$(PRIVATE_IMPORT_INCLUDES) \
		$(addprefix -isystem ,\
		    $(if $(PRIVATE_NO_DEFAULT_COMPILER_FLAGS),, \
		        $(filter-out $(PRIVATE_C_INCLUDES), \
		            $(PRIVATE_TARGET_PROJECT_INCLUDES) \
		            $(PRIVATE_TARGET_C_INCLUDES)))) \
		-c \
		$(if $(PRIVATE_NO_DEFAULT_COMPILER_FLAGS),, \
		    $(PRIVATE_TARGET_GLOBAL_CFLAGS) \
		    $(PRIVATE_TARGET_GLOBAL_CPPFLAGS) \
		    $(PRIVATE_ARM_CFLAGS) \
		 ) \
		$(PRIVATE_RTTI_FLAG) \
		$(PRIVATE_CFLAGS) \
		$(PRIVATE_CPPFLAGS) \
		$(PRIVATE_DEBUG_CFLAGS) \
		-MD -MF $(patsubst %.o,%.d,$@) -o $@ $<
	$(transform-d-to-p)
	endef	
	
	###########################################################
	## Commands for running gcc to compile a C file
	###########################################################
	
17. package.mk
	###########################################################
	## Standard rules for building an application package.
	##
	## Additional inputs from base_rules.make:
	## LOCAL_PACKAGE_NAME: The name of the package; the directory
	## will be called this.
	##
	## MODULE, MODULE_PATH, and MODULE_SUFFIX will
	## be set for you.
	###########################################################
  	
  # If this makefile is being read from within an inheritance,
	# use the new values.	
	
	# Android packages should use Android resources or assets.
	
	# Package LOCAL_MODULE_TAGS default to optional
	
	#################################
	include $(BUILD_SYSTEM)/java.mk
	#################################
    
	
	